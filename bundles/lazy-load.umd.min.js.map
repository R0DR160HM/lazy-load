{"version":3,"sources":["ng://lazy-load/lib/requests/LazyLoader.ts"],"names":["LazyLoader","value","this","_timesCalled","_isCalling","_value","prototype","train","origin","path","_i","arguments","length","_path","_origin","Object","defineProperty","undefined","setValue","call","_this","oldValue","Promise","resolve","reject","then","result","_resolve","catch","err","subscribe","clear","_callbackResult","data","finalData","forEach","key","currentValue","requestResponse"],"mappings":"sNAEA,MAAA,aAMA,iBAcE,SAAAA,EAAYC,GATJC,KAAAC,aAAe,EACfD,KAAAE,YAAa,EASnBF,KAAKG,OAASJ,EA2GlB,OAlGSD,EAAAM,UAAAC,MAAP,SAAaC,OAAyC,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,GAGpD,OAFA,KAAKG,MAAQJ,EACb,KAAKK,QAAUN,EACf,MAMFO,OAAAC,eAAWhB,EAAAM,UAAA,YAAS,KAApB,WACE,OAAOJ,KAAKE,4CAMdW,OAAAC,eAAWhB,EAAAM,UAAA,WAAQ,KAAnB,WACE,OAAOJ,KAAKC,aAAe,mCAM7BY,OAAAC,eAAWhB,EAAAM,UAAA,UAAO,KAAlB,WACE,OAAOJ,KAAKC,aAAe,GAAqB,OAAhBD,KAAKG,aAAmCY,IAAhBf,KAAKG,wCAM/DU,OAAAC,eAAWhB,EAAAM,UAAA,QAAK,KAAhB,WACE,OAAOJ,KAAKG,wCAMdU,OAAAC,eAAWhB,EAAAM,UAAA,cAAW,KAAtB,WACE,OAAOJ,KAAKC,8CAGPH,EAAAM,UAAAY,SAAP,SAAgBjB,GACdC,KAAKG,OAASJ,GAUTD,EAAAM,UAAAa,KAAP,SAAYX,OAAZ,IAAAY,EAAAlB,KAAqDO,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,GAC/CR,KAAKW,QAAUJ,IACjBA,EAAOP,KAAKW,OAEVX,KAAKY,UAAYN,IACnBA,EAASN,KAAKY,aAEVO,EAAWnB,KAAKG,OAGtB,OAFAH,KAAKE,YAAa,EAEX,IAAIkB,SAAO,SAAEC,EAASC,GAC3Bf,EAAOA,GAAQ,GACXD,aAAkBc,QACpBd,EAAOiB,MAAI,SAACC,GAAU,OAAAN,EAAKO,SAASD,EAAQjB,EAAMc,EAASF,MAC1DO,OAAK,SAACC,GAAO,OAAAL,EAAOK,MAErBrB,EAAOsB,WAAS,SAACJ,GAAU,OAAAN,EAAKO,SAASD,EAAQjB,EAAMc,EAASF,MAAS,SACzEQ,GAAO,OAAAL,EAAOK,UASb7B,EAAAM,UAAAyB,MAAP,WACE7B,KAAKG,YAASY,EACdf,KAAKC,aAAe,GAGdH,EAAAM,UAAA0B,gBAAR,SAAwBC,EAAWxB,OAC7ByB,EAAYD,EACZxB,EAAKG,OAAS,GAChBH,EAAK0B,SAAO,SAACC,GAAO,OAAAF,EAAYA,EAAUE,MAE5ClC,KAAKG,OAAS6B,GAGRlC,EAAAM,UAAAqB,SAAR,SAAiBD,EAAajB,EAAac,EAAcF,GACvDnB,KAAK8B,gBAAgBN,EAAQjB,GAC7BP,KAAKE,YAAa,EAClBF,KAAKC,eACLoB,EAAQ,CAAEF,SAAQA,EAAEgB,aAAcnC,KAAKG,OAAQiC,gBAAiBZ,KAGpE1B","sourcesContent":["import { Observable } from 'rxjs';\r\n\r\nexport class CallResponse<T> {\r\n  oldValue: T;\r\n  currentValue: T;\r\n  requestResponse: unknown;\r\n}\r\n\r\nexport class LazyLoader<T> {\r\n\r\n  // tslint:disable: variable-name\r\n  private _value: T;\r\n\r\n  private _timesCalled = 0;\r\n  private _isCalling = false;\r\n\r\n  private _path: any[];\r\n  private _origin: Observable<any> | Promise<any>;\r\n\r\n  /**\r\n   * @optional @param value Optional initial value for the LazyLoader\r\n   */\r\n  constructor(value?: T) {\r\n    this._value = value;\r\n  }\r\n\r\n  /**\r\n   * @description Train a LazyLoader so it is not necessary to pass the origin and path on each call\r\n   * @optional @param origin Observable or Promise where the information will be taken from\r\n   * @optional @param path Indicates the position of the desired information within the result\r\n   * @returns An trained LazyLoader\r\n   */\r\n  public train(origin?: Promise<any> | Observable<any>, ...path: (string | number | symbol)[]) {\r\n    this._path = path;\r\n    this._origin = origin;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @description Indicates whether a call is currently taking place\r\n   */\r\n  public get isCalling() {\r\n    return this._isCalling;\r\n  }\r\n\r\n  /**\r\n   * @description Indicates whether LazyLoader was called once\r\n   */\r\n  public get isCalled() {\r\n    return this._timesCalled > 0;\r\n  }\r\n\r\n  /**\r\n   * @description Indicates whether the value of LazyLoader is valid\r\n   */\r\n  public get isValid() {\r\n    return this._timesCalled > 0 && this._value !== null && this._value !== undefined;\r\n  }\r\n\r\n  /**\r\n   * @description Current value of the LazyLoader, result of the .call()\r\n   */\r\n  public get value() {\r\n    return this._value;\r\n  }\r\n\r\n  /**\r\n   * @description Indicates how much times the .call() was successfully executed\r\n   */\r\n  public get timesCalled() {\r\n    return this._timesCalled;\r\n  }\r\n\r\n  public setValue(value: T) {\r\n    this._value = value;\r\n  }\r\n\r\n  /**\r\n   * @description Does an asynchronous call to get the value\r\n   * @optional @param origin Observable or Promise where the information will be taken from\r\n   * @optional @param path Indicates the position of the desired information within the result\r\n   * @returns An Promise<CallResponse<T>> at the and of the call\r\n   * @example .call(this.service.fetch(), 'records', 0) // will return the first element of an asyncronous call that returns an object with an array called records\r\n   */\r\n  public call(origin?: Promise<any> | Observable<any>, ...path: (string | number | symbol)[]): Promise<CallResponse<T>> {\r\n    if (this._path && !path) {\r\n      path = this._path;\r\n    }\r\n    if (this._origin && !origin) {\r\n      origin = this._origin;\r\n    }\r\n    const oldValue = this._value;\r\n    this._isCalling = true;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      path = path || [];\r\n      if (origin instanceof Promise) {\r\n        origin.then(result => this._resolve(result, path, resolve, oldValue))\r\n        .catch(err => reject(err));\r\n      } else {\r\n        origin.subscribe(result => this._resolve(result, path, resolve, oldValue),\r\n        err => reject(err));\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * @description Clears all content so it can be reloaded from scratch without creating a new memory variable\r\n   */\r\n  public clear() {\r\n    this._value = undefined;\r\n    this._timesCalled = 0;\r\n  }\r\n\r\n  private _callbackResult(data: any, path: any[]) {\r\n    let finalData = data;\r\n    if (path.length > 0) {\r\n      path.forEach(key => finalData = finalData[key]);\r\n    }\r\n    this._value = finalData;\r\n  }\r\n\r\n  private _resolve(result: any, path: any[], resolve: any, oldValue: T) {\r\n    this._callbackResult(result, path);\r\n    this._isCalling = false;\r\n    this._timesCalled++;\r\n    resolve({ oldValue, currentValue: this._value, requestResponse: result });\r\n  }\r\n\r\n}\r\n"]}